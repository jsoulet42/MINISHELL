/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   expand_cmd.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hnogared <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/08/27 14:57:49 by hnogared          #+#    #+#             */
/*   Updated: 2023/08/27 22:59:52 by hnogared         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../Includes/minishell.h"

int	check_quotes(char *str)
{
	char	quote;

	if (!str)
		return (1);
	quote = 0;
	while (*str)
	{
		if ((*str == '\'' || *str == '"') && (quote == 0 || quote == *str))
			quote = (quote == 0) * *str;
		str++;
	}
	return (quote != 0);
}

static char	**split_quotes_words(char *str, t_env *env)
{
	int		len;
	char	*word;
	char	**res;

	if (!str || !env)
		return (NULL);
	res = NULL;
	while (*str)
	{
		len = 0;
		if (*str == '\'' || *str == '"')
			len = (uintptr_t)(ft_strchrnul(str + 1, *str) - str + 1);
		else
		{
			while (str[len] && str[len] != '\'' && str[len] != '"')
				len++;
		}
		word = ft_substr(str, 0, len);
		if (!word)
			return (free_str_tab((void **)res), NULL);
		str += len;
		if (word[0] != '\'')
		{
			res = str_tab_add_neo(res, expand_dollars(word));
			free(word);
			continue ;
		}
		res = str_tab_add_neo(res, word);
	}
	return (res);
}
/*
static char	**expand_cmd_parts(char **cmd_tab, t_env *env, int trigger)
{
	char	*temp;
	char	**temp_tab;

	if (!cmd_tab || !env)
		return (NULL);
	temp_tab = cmd_tab - 1;
	while (*(++temp_tab))
	{
		if (!trigger && *temp_tab[0] == '\'')
		{
			ft_supprchar(temp_tab, 0);
			ft_supprchar(temp_tab + 1, 0);
			continue ;
		}
		if ((count_chars(*temp_tab, '"') % 2) != 0)
			trigger = (trigger == 0);
		if (!ft_strchr(*temp_tab, '$'))
			continue ;
		temp = expand_dollars(*temp_tab, env);
		if (!temp)
			return (NULL);
		free(*temp_tab);
		*temp_tab = temp;
	}
	return (cmd_tab);
}
*/
// TODO mode for '' and "" included or not (see bash heredoc)

char	*expand_cmd(char *cmd, t_env *env)
{
	char	*res;
	char	**quotes_split;

	if (!cmd | !env)
		return (NULL);
//	if (check_quotes(cmd))
//		return (NULL);
//	quotes_split = ft_keep_split(cmd, '\'');
	quotes_split = split_quotes_words(cmd, env);
	if (!quotes_split)
		return (NULL);
//	if (!expand_cmd_parts(quotes_split, env, 0))
//		return (free_str_tab((void **)quotes_split), NULL);
	res = join_str_tab((const char **)quotes_split);
	free_str_tab((void **)quotes_split);
	return (res);
}
